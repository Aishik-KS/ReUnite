export function compareImageDescriptions(desc1, desc2) {
    // Tokenize and preprocess the strings
    const tokenize = (str) => {
        return str.toLowerCase()
            .replace(/[^\w\s]/g, '') // Remove punctuation
            .split(/\s+/) // Split on whitespace
            .filter(word => word.length > 0); // Remove empty tokens
    };

    const tokens1 = tokenize(desc1);
    const tokens2 = tokenize(desc2);
    
    // Get all unique words from both descriptions
    const allWords = [...new Set([...tokens1, ...tokens2])];
    
    // Create term frequency vectors
    const vector1 = allWords.map(word => 
        tokens1.filter(t => t === word).length / tokens1.length
    );
    
    const vector2 = allWords.map(word => 
        tokens2.filter(t => t === word).length / tokens2.length
    );
    
    // Calculate cosine similarity
    let dotProduct = 0;
    let magnitude1 = 0;
    let magnitude2 = 0;
    
    for (let i = 0; i < allWords.length; i++) {
        dotProduct += vector1[i] * vector2[i];
        magnitude1 += vector1[i] * vector1[i];
        magnitude2 += vector2[i] * vector2[i];
    }
    
    magnitude1 = Math.sqrt(magnitude1);
    magnitude2 = Math.sqrt(magnitude2);
    
    const similarity = dotProduct / (magnitude1 * magnitude2);
    
    // Handle NaN cases (when one description is empty)
    if (isNaN(similarity)) return 0;
    
    // Convert to percentage (0-100 scale)
    return Math.round(similarity * 100);
}
